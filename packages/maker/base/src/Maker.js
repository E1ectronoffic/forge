/* eslint-disable no-unused-vars */

import fs from 'fs-extra';
import path from 'path';

export default class Maker {
  constructor(name) {
    this.name = name;
    Object.defineProperty(this, '__isElectronForgeMaker', {
      value: true,
      enumerable: false,
      configurable: false,
    });
  }

  /**
   * Makers must implement this method and return true or false indicating whether
   * this maker can be run on the current platform.  Normally this is just a process.platform
   * check but it can be a deeper check for dependencies like fake-root or other
   * required external build tools.
   *
   * If the issue is a missing dependency you should log out a HELPFUL error message
   * telling the developer exactly what is missing and if possible how to get it.
   */
  async isSupportedOnCurrentPlatform() {
    throw new Error(`Maker ${this.name} did not implement the isSupportedOnCurrentPlatform method`);
  }

  /**
   * Makers must implement this method and return an array of absolute paths
   * to the artifacts generated by your maker
   */
  async make({
    dir,            // The directory containing the packaged Electron application
    makeDir,        // The directory you should put all your artifacts in (potentially in sub folders)
                    // NOTE: this directory is not guarunteed to already exist
    appName,        // The resolved human friendly name of the project
    targetPlatform, // The target platform you should make for
    targetArch,     // The target architecture you should make for
    config,         // The configuration object designated for this maker
    forgeConfig,    // Fully resolved forge configuration, you shouldn't really need this
    packageJSON,    // The applications package.json file
  }) {
    throw new Error(`Maker ${this.name} did not implement the make method`);
  }


  /**
   * Helpers
   */

  /**
   * Ensures the directory exists and is forced to be empty.
   *
   * I.e. If the directory already exists it is deleted and recreated, this
   * is a destructive operation
   */
  async ensureDirectory(dir) {
    if (await fs.pathExists(dir)) {
      await fs.remove(dir);
    }
    return fs.mkdirs(dir);
  }

  /**
   * Ensures the path to the file exists and the file does not exist
   *
   * I.e. If the file already exists it is deleted and the path created
   */
  async ensureFile(file) {
    if (await fs.pathExists(file)) {
      await fs.remove(file);
    }
    await fs.mkdirs(path.dirname(file));
  }
}
